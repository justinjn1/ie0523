
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33 (git sha1 2584903a060)


-- Executing script file `gatemanager.ys' --

1. Executing Verilog-2005 frontend: gatemanager.v
Parsing Verilog input from `gatemanager.v' to AST representation.
Generating RTLIL representation for module `\gatemanager'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Analyzing design hierarchy..
Top module:  \gatemanager

2.2. Analyzing design hierarchy..
Top module:  \gatemanager
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 8 switch rules as full_case in process $proc$gatemanager.v:42$2 in module gatemanager.
Marked 1 switch rules as full_case in process $proc$gatemanager.v:30$1 in module gatemanager.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 5 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~9 debug messages>

3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\gatemanager.$proc$gatemanager.v:42$2'.
     1/17: $6\nextState[3:0]
     2/17: $5\wrong_pin_alarm[0:0]
     3/17: $4\wrong_pin_alarm[0:0]
     4/17: $4\nextCnt[1:0]
     5/17: $5\nextState[3:0]
     6/17: $3\wrong_pin_alarm[0:0]
     7/17: $3\nextCnt[1:0]
     8/17: $2\nextCnt[1:0]
     9/17: $4\nextState[3:0]
    10/17: $2\wrong_pin_alarm[0:0]
    11/17: $3\nextState[3:0]
    12/17: $2\nextState[3:0]
    13/17: $1\nextState[3:0]
    14/17: $1\nextCnt[1:0]
    15/17: $1\lock_alarm[0:0]
    16/17: $1\gate[0:0]
    17/17: $1\wrong_pin_alarm[0:0]
Creating decoders for process `\gatemanager.$proc$gatemanager.v:30$1'.
     1/2: $0\cnt[1:0]
     2/2: $0\state[3:0]

3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\gatemanager.\wrong_pin_alarm' from process `\gatemanager.$proc$gatemanager.v:42$2'.
No latch inferred for signal `\gatemanager.\gate' from process `\gatemanager.$proc$gatemanager.v:42$2'.
No latch inferred for signal `\gatemanager.\lock_alarm' from process `\gatemanager.$proc$gatemanager.v:42$2'.
No latch inferred for signal `\gatemanager.\nextState' from process `\gatemanager.$proc$gatemanager.v:42$2'.
No latch inferred for signal `\gatemanager.\nextCnt' from process `\gatemanager.$proc$gatemanager.v:42$2'.

3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\gatemanager.\state' using process `\gatemanager.$proc$gatemanager.v:30$1'.
  created $dff cell `$procdff$161' with positive edge clock.
Creating register for signal `\gatemanager.\cnt' using process `\gatemanager.$proc$gatemanager.v:30$1'.
  created $dff cell `$procdff$162' with positive edge clock.

3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 8 empty switches in `\gatemanager.$proc$gatemanager.v:42$2'.
Removing empty process `gatemanager.$proc$gatemanager.v:42$2'.
Found and cleaned up 1 empty switch in `\gatemanager.$proc$gatemanager.v:30$1'.
Removing empty process `gatemanager.$proc$gatemanager.v:30$1'.
Cleaned up 9 empty switches.

3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module gatemanager.
<suppressed ~4 debug messages>

4. Executing FSM pass (extract and optimize FSM).

4.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register gatemanager.state.

4.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\gatemanager'.
  found $dff cell for state register: $procdff$161
  root of input selection tree: $procmux$159_Y
  found reset state: 4'0001 (guessed from mux tree)
  found ctrl input: \rst
  found ctrl input: $procmux$135_CMP
  found ctrl input: $procmux$136_CMP
  found ctrl input: $procmux$137_CMP
  found ctrl input: $procmux$138_CMP
  found state code: 4'0001
  found ctrl input: $procmux$18_CMP
  found ctrl input: \s02
  found ctrl input: $procmux$104_CMP
  found ctrl input: $eq$gatemanager.v:62$6_Y
  found ctrl input: $procmux$70_CMP
  found ctrl input: $gt$gatemanager.v:66$7_Y
  found state code: 4'0100
  found state code: 4'1000
  found ctrl input: $procmux$132_CMP
  found ctrl input: $logic_and$gatemanager.v:55$4_Y
  found ctrl input: $procmux$123_CMP
  found ctrl input: $logic_and$gatemanager.v:56$5_Y
  found state code: 4'0010
  found ctrl output: $procmux$18_CMP
  found ctrl output: $procmux$34_CMP
  found ctrl output: $procmux$47_CMP
  found ctrl output: $procmux$60_CMP
  found ctrl output: $procmux$70_CMP
  found ctrl output: $procmux$80_CMP
  found ctrl output: $procmux$90_CMP
  found ctrl output: $procmux$97_CMP
  found ctrl output: $procmux$104_CMP
  found ctrl output: $procmux$111_CMP
  found ctrl output: $procmux$123_CMP
  found ctrl output: $procmux$132_CMP
  found ctrl output: $procmux$135_CMP
  found ctrl output: $procmux$136_CMP
  found ctrl output: $procmux$137_CMP
  found ctrl output: $procmux$138_CMP
  found ctrl output: $procmux$142_CMP
  found ctrl output: $procmux$147_CMP
  found ctrl output: $procmux$150_CMP
  found ctrl output: $procmux$154_CMP
  ctrl inputs: { $gt$gatemanager.v:66$7_Y $eq$gatemanager.v:62$6_Y $logic_and$gatemanager.v:56$5_Y $logic_and$gatemanager.v:55$4_Y \s02 \rst }
  ctrl outputs: { $procmux$159_Y $procmux$154_CMP $procmux$150_CMP $procmux$147_CMP $procmux$142_CMP $procmux$138_CMP $procmux$137_CMP $procmux$136_CMP $procmux$135_CMP $procmux$132_CMP $procmux$123_CMP $procmux$111_CMP $procmux$104_CMP $procmux$97_CMP $procmux$90_CMP $procmux$80_CMP $procmux$70_CMP $procmux$60_CMP $procmux$47_CMP $procmux$34_CMP $procmux$18_CMP }
  transition:     4'1000 6'----00 ->     4'1000 24'100001000001000000000001
  transition:     4'1000 6'----10 ->     4'0001 24'000101000001000000000001
  transition:     4'1000 6'-----1 ->     4'0001 24'000101000001000000000001
  transition:     4'0100 6'-----0 ->     4'0100 24'010000100100000000000000
  transition:     4'0100 6'-----1 ->     4'0001 24'000100100100000000000000
  transition:     4'0010 6'00---0 ->     4'0010 24'001010010010001111111110
  transition:     4'0010 6'10---0 ->     4'0100 24'010010010010001111111110
  transition:     4'0010 6'-1---0 ->     4'1000 24'100010010010001111111110
  transition:     4'0010 6'-----1 ->     4'0001 24'000110010010001111111110
  transition:     4'0001 6'--00-0 ->     4'0001 24'000100001000110000000000
  transition:     4'0001 6'--10-0 ->     4'0100 24'010000001000110000000000
  transition:     4'0001 6'---1-0 ->     4'0010 24'001000001000110000000000
  transition:     4'0001 6'-----1 ->     4'0001 24'000100001000110000000000

4.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$163' from module `\gatemanager'.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gatemanager..
Removed 36 unused cells and 91 unused wires.
<suppressed ~38 debug messages>

4.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$163' from module `\gatemanager'.
  Removing unused output signal $procmux$18_CMP.
  Removing unused output signal $procmux$70_CMP.
  Removing unused output signal $procmux$104_CMP.
  Removing unused output signal $procmux$123_CMP.
  Removing unused output signal $procmux$132_CMP.
  Removing unused output signal $procmux$135_CMP.
  Removing unused output signal $procmux$136_CMP.
  Removing unused output signal $procmux$137_CMP.
  Removing unused output signal $procmux$138_CMP.
  Removing unused output signal $0\state[3:0] [0].
  Removing unused output signal $0\state[3:0] [1].
  Removing unused output signal $0\state[3:0] [2].
  Removing unused output signal $0\state[3:0] [3].

4.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$163' from module `\gatemanager' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  1000 -> --1-
  0100 -> -1--
  0010 -> 1---
  0001 -> ---1

4.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$163' from module `gatemanager':
-------------------------------------

  Information on FSM $fsm$\state$163 (\state):

  Number of input signals:    6
  Number of output signals:  11
  Number of state bits:       4

  Input signals:
    0: \rst
    1: \s02
    2: $logic_and$gatemanager.v:55$4_Y
    3: $logic_and$gatemanager.v:56$5_Y
    4: $eq$gatemanager.v:62$6_Y
    5: $gt$gatemanager.v:66$7_Y

  Output signals:
    0: $procmux$34_CMP
    1: $procmux$47_CMP
    2: $procmux$60_CMP
    3: $procmux$80_CMP
    4: $procmux$90_CMP
    5: $procmux$97_CMP
    6: $procmux$111_CMP
    7: $procmux$142_CMP
    8: $procmux$147_CMP
    9: $procmux$150_CMP
   10: $procmux$154_CMP

  State encoding:
    0:     4'--1-
    1:     4'-1--
    2:     4'1---
    3:     4'---1  <RESET STATE>

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 6'----00   ->     0 11'01000000000
      1:     0 6'----10   ->     3 11'01000000000
      2:     0 6'-----1   ->     3 11'01000000000
      3:     1 6'-----0   ->     1 11'00100000000
      4:     1 6'-----1   ->     3 11'00100000000
      5:     2 6'-1---0   ->     0 11'10011111111
      6:     2 6'10---0   ->     1 11'10011111111
      7:     2 6'00---0   ->     2 11'10011111111
      8:     2 6'-----1   ->     3 11'10011111111
      9:     3 6'--10-0   ->     1 11'00000000000
     10:     3 6'---1-0   ->     2 11'00000000000
     11:     3 6'--00-0   ->     3 11'00000000000
     12:     3 6'-----1   ->     3 11'00000000000

-------------------------------------

4.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$163' from module `\gatemanager'.

5. Executing MEMORY pass.

5.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gatemanager..
Removed 0 unused cells and 23 unused wires.
<suppressed ~1 debug messages>

5.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gatemanager..

5.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$gt:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=1:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using template $paramod$9fe62a4b81638d72bc060d25c78265035b9c879a\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
No more expansions possible.
<suppressed ~781 debug messages>

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=3, area=18.00) is a direct match for cell type $_DFF_P_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.C( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

7.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\gatemanager':
  mapped 6 $_DFF_P_ cells to \DFF cells.

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\gatemanager' to `<abc-temp-dir>/input.blif'..
Extracted 821 gates and 865 wires to a netlist network with 41 inputs and 9 outputs.

8.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /home/justinjn2/Desktop/IE-0523/Tareas/Tarea02/verilog/./cmos_cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Libery parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Libery parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Library "demo" from "/home/justinjn2/Desktop/IE-0523/Tareas/Tarea02/verilog/./cmos_cells.lib" has 4 cells (1 skipped: 1 seq; 0 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.01 MB. Time =     0.00 sec
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       42
ABC RESULTS:              NAND cells:       60
ABC RESULTS:               NOR cells:       69
ABC RESULTS:               BUF cells:        2
ABC RESULTS:        internal signals:      815
ABC RESULTS:           input signals:       41
ABC RESULTS:          output signals:        9
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gatemanager.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gatemanager'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gatemanager..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gatemanager.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gatemanager'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gatemanager..
Removed 0 unused cells and 472 unused wires.
<suppressed ~2 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gatemanager.

9.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gatemanager..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gatemanager.
Performed a total of 0 changes.

9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gatemanager'.
Removed a total of 0 cells.

9.13. Executing OPT_DFF pass (perform DFF optimizations).

9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gatemanager..

9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gatemanager.

9.16. Finished OPT passes. (There is nothing left to do.)

10. Executing Verilog backend.

10.1. Executing BMUXMAP pass.

10.2. Executing DEMUXMAP pass.
Dumping module `\gatemanager'.

End of script. Logfile hash: 7f511d6b15, CPU: user 0.19s system 0.00s, MEM: 15.49 MB peak
Yosys 0.33 (git sha1 2584903a060)
Time spent: 45% 1x abc (0 sec), 17% 1x techmap (0 sec), ...
